// schemas/projects/veve/blockchain.prisma
// Blockchain (Tokens, Transfers and Mints)

model veve_wallets {
  id                      String                    @id
  user_id                 String?                   @unique
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime?
  veve_username           String?                   @unique
  veve_id                 String?
  merged_to               String?
  tagsId                  Int?
  first_activity_date     DateTime?
  last_activity_date      DateTime?
  lgcy_veve_id            String?
  lgcy_veve_username      String?
  active                  Boolean?                  @default(false)
  has_kyc                 Boolean?                  @default(false)
  is_pre_imx              Boolean?                  @default(false)
  mintalysis_note         String?
  veve_leaderboard        veve_leaderboard[]
  veve_tokens             veve_tokens[]
  veve_wallets_valuations veve_wallets_valuations[]
  veve_wallet_tags        veve_wallet_tags[]

  @@index([last_activity_date])
  @@index([first_activity_date])
  @@index([id, user_id, veve_username])
}

model veve_wallets_valuations {
  id                     Int                 @id @default(autoincrement())
  wallet_id              String
  wallet                 veve_wallets?       @relation(fields: [wallet_id], references: [id])
  timestamp              DateTime            @default(now())
  total_valuation        Decimal?            @db.Decimal(10, 2)
  collectibles_valuation Decimal?            @db.Decimal(10, 2)
  comics_valuation       Decimal?            @db.Decimal(10, 2)
  total_count            Int?
  total_collectibles     Int?
  total_comics           Int?
  type                   WalletValuationType @default(TOTAL)

  @@unique([wallet_id, timestamp])

}

model veve_tokens {
  token_id           Int                 @id
  name               String?
  edition            Int?
  mint_date          DateTime?           @db.DateTime(6)
  rarity             String?
  collectible_id     String?
  unique_cover_id    String?
  type               String?             @db.Text
  created_at         DateTime?           @default(now()) @db.DateTime(6)
  last_updated       DateTime?           @db.DateTime(6)
  brand_id           String?
  licensor_id        String?
  series_id          String?
  wallet_id          String?
  element_id         String?
  comic_image_url_id String?             @db.VarChar(50)
  mint_order         Int?
  rarity_mint_order  Int?
  mcp_ed_bonus       Boolean?            @default(false)
  to_process         Boolean?            @default(false)
  is_invalid         Boolean?            @default(false)
  is_burned          Boolean?            @default(false)
  no_meta            Boolean?            @default(false)
  is_premint         Boolean?            @default(false)
  has_full_meta      Boolean?            @default(false)
  mintalysis_note    String?
  tag                String?
  veve_brands        brands?        @relation(fields: [brand_id], references: [brand_id])
  veve_wallets       veve_wallets?       @relation(fields: [wallet_id], references: [id], map: "veve_tokens_ibfk_1")
  veve_licensors     licensors?     @relation(fields: [licensor_id], references: [licensor_id])
  veve_series        veve_series?        @relation(fields: [series_id], references: [series_id])
  veveTokenCollectibles  veveTokenCollectible[]
  veveTokenComics        veveTokenComic[]

  @@index([brand_id], map: "veve_tokens_brand_id_fkey")
  @@index([licensor_id], map: "veve_tokens_licensor_id_fkey")
  @@index([series_id], map: "veve_tokens_series_id_fkey")
  @@index([wallet_id], map: "veve_tokens_ibfk_1")
  @@index([collectible_id])
  @@index([comic_image_url_id])
  @@index([unique_cover_id])
  @@index([edition])
}

model veveTokenCollectible {
  token_id          Int
  collectible_id    String?
  veve_tokens       veve_tokens @relation(fields: [token_id], references: [token_id])
  veve_collectibles veve_collectibles? @relation(fields: [collectible_id], references: [collectible_id], onDelete: SetNull, onUpdate: SetNull)

  @@id([token_id])
  @@unique([token_id, collectible_id])
}

model veveTokenComic {
  token_id        Int
  unique_cover_id        String
  veve_tokens    veve_tokens   @relation(fields: [token_id], references: [token_id])
  veve_comics    veve_comics   @relation(fields: [unique_cover_id], references: [unique_cover_id])

  @@id([token_id, unique_cover_id])
}
model veve_transfers {
  id              Int       @id
  from_wallet     String
  to_wallet       String
  timestamp       String?   @db.Text
  token_id        Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  to_process      Boolean?  @default(false)
  break_even      Float?
  entry_price     Float?
  break_even_new  Float?
  entry_price_new Float?
  timestamp_dt    DateTime? @db.DateTime(6)
  txn_type        String?
  is_burned       Boolean?  @default(false)
  mintalysis_note String?

  @@index([createdAt])
  @@index([timestamp_dt])
  @@index([token_id, createdAt])
  @@index([token_id, from_wallet, to_wallet])
  @@index([to_wallet, from_wallet])
  @@index([from_wallet])
  @@index([to_wallet])
}

model veve_mints {
  id              Int       @id
  wallet_id       String?
  timestamp       String?   @db.Text
  token_id        Int
  to_process      Boolean?  @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  timestamp_dt    DateTime? @db.DateTime(6)
  is_burned       Boolean?  @default(false)
  is_redemption   Boolean?  @default(false)
  transfer_count  Int?      @default(0)
  mintalysis_note String?

  @@index([createdAt])
  @@index([timestamp_dt])
  @@index([wallet_id, token_id])
  @@index([token_id])
  @@index([wallet_id])
}

model veve_token_owner {
  token_id        Int       @id
  wallet_id       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  @@index([wallet_id, token_id])
  @@index([token_id])
  @@index([wallet_id])
}
// schemas/projects/veve/mcp.prisma
// VeVe MCP Calculation


model veve_mcp_daily_pts {
  id               Int        @id @default(autoincrement())
  wallet_id        String     @unique   
  mcp_daily_pts    Json?
  mcp_total_pts    Decimal?   @default(0)
  updatedAt        DateTime   @updatedAt()
  created_at       DateTime   @default(now())
}

model veve_mcp_staging {
  id                 Int        @id @default(autoincrement())
  transaction_id     Int?      
  token_id           Int?
  from_wallet        String?
  buyer_username     String?
  to_wallet          String?
  seller_username    String?
  timestamp          DateTime?
  txn_type           String?
  gem_amount         Float?     
  type               String?
  edition            Int?
  rarity             String?
  collectible_id     String?
  comic_image_url_id String?
  series_id          String?
  nbr_of_items       Int?
  comic_low_ed_limit Int?
  comic_rarity_value Decimal?  @db.Decimal(10, 2)
  coll_base_value    Int?
  coll_dup_value     Decimal?  @db.Decimal(10, 2)
  coll_rarity_value  Decimal?  @db.Decimal(10, 2)
  coll_low_ed_limit  Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
}

model veve_mcp_completed_sets {
  id               Int        @id @default(autoincrement())
  wallet_id        String        
  series_id        String
  date_completed   DateTime
  completed_count  Int
  date_set_broken  DateTime?
  completed_set    Boolean
  updatedAt        DateTime   @updatedAt()
  created_at       DateTime   @default(now())
}

model veve_mcp_staging_sets {
  id               Int        @id @default(autoincrement())
  wallet_id        String
  series_id        String
  collectible_id   String
  count            Int
  updatedAt        DateTime   @updatedAt()
  created_at       DateTime   @default(now())
}

model veve_mcp_staging_csv_import {
  id               Int        @id @default(autoincrement())
  txn_date         DateTime
  txn_type         String
  item_name        String?
  edition          Int?
  buyer_username   String?
  seller_username  String?
  gem_amount       Float?
  updatedAt        DateTime   @updatedAt()
  created_at       DateTime   @default(now())
}

model veve_mcp_staging_csv_import_sets {
  id                   Int        @id @default(autoincrement())
  wallet_id            String
  series_id            String
  series_name          String?
  nbr_of_items         Int?
  daily_mcp_pts        Float?
  date_set_completed   DateTime
  date_set_broken      DateTime?
  updatedAt        DateTime   @updatedAt()
  created_at       DateTime   @default(now())
}

model veve_mcp_output {
  id                  Int        @id @default(autoincrement())
  wallet_id           String
  mint_count          Int?
  mint_points         Int? 
  mkt_purchase_count  Int?
  mkt_purchase_pts    Int?
  col_count           Int? 
  col_pts             Int?
  col_rarity_bonus    Float?     
  col_low_ed_bonus    Float?     
  col_dup_bonus       Float?     
  col_set_count       Int?
  col_set_bonus       Int?
  col_dup_set_bonus   Int?
  comic_count         Int?
  comic_pts           Float?     
  comic_rarity_bonus  Float?     
  comic_low_ed_bonus  Float?     
  comic_dup_bonus     Float?     
  omi_balance         Float?     
  omi_mcp_pts         Float?     
  total_col_pts       Float?     
  total_comic_pts     Float?     
  total_daily_pts     Float?     @default(0)
  total__mcp_pts      Float?     @default(0)
  mcp_level           String?
  mcp_rank            String?
  updated_at          DateTime   @updatedAt()
  created_at          DateTime   @default(now())
}

model mcp_rank {
  id               Int        @id @default(autoincrement())
  rank             String
  min_points       Int
  max_points       Int
  updatedAt        DateTime   @updatedAt()
  created_at       DateTime   @default(now())
}

model mcp_level {
  id               Int        @id @default(autoincrement())
  level            String
  min_points       Int
  max_points       Int
  updatedAt        DateTime   @updatedAt()
  created_at       DateTime   @default(now())
}
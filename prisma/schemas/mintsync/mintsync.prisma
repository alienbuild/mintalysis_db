model direct_message {
  id        Int      @id @default(autoincrement())
  content   String
  type      MessageType @default(TEXT)
  sender_id  String
  receiver_id String
  sender    User     @relation("sender", fields: [sender_id], references: [id])
  receiver  User     @relation("receiver", fields: [receiver_id], references: [id])
  createdAt DateTime @default(now())
}

model channel_message {
  id               Int              @id @default(autoincrement())
  content          String
  type             MessageType @default(TEXT)
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  channel_id       Int
  channel          channel     @relation(fields: [channel_id], references: [id])
  createdThreadId  Int?
  createdThread    thread?     @relation(name: "CreatedThread")
  partOfThreadId   Int?
  partOfThread     thread?     @relation(name: "PartOfThread")
  createdAt        DateTime   @default(now())
}

model thread {
  id                Int               @id @default(autoincrement())
  startingMessageId Int               @unique
  startingMessage   channel_message?   @relation(name: "CreatedThread", fields: [startingMessageId], references: [id])
  messages          channel_message[] @relation(name: "PartOfThread")
}

model server {
  id            Int         @id @default(autoincrement())
  slug          String?     @unique
  description   String?
  icon          String?
  coverImage    String?
  name          String
  ownerId       String
  owner         User        @relation(fields: [ownerId], references: [id])
  members       User[]      @relation("server_members")
  channels      channel[]
  is_public     Boolean     @default(false)
  roles         role[]
}

model channel {
  id                            Int             @id @default(autoincrement())
  slug                          String?         @unique
  name                          String
  type                          ChannelType     @default(TEXT)
  topic                         String?
  slowModeDelay                 Int?
  server_id                     Int
  server                        server          @relation(fields: [server_id], references: [id])
  messages                      channel_message[]
}

model server_member {
  userId    String
  serverId  Int
  user      User        @relation(fields: [userId], references: [id])
  server    server      @relation(fields: [serverId], references: [id])
  roles     UserToRoles[] @relation("user_roles")

  @@id([userId, serverId])
}

// model ChannelMember {
//   userId    String
//   channelId Int
//   user      User    @relation(fields: [userId], references: [id])
//   channel   channel @relation(fields: [channelId], references: [id])
//   role      role    @relation(fields: [roleId], references: [id])
//   roleId    Int    // Optional, can be null if the member has no specific role

//   @@id([userId, channelId])
// }

model channel_read_receipt {
  userId    String
  channelId Int
  lastRead  DateTime @default(now())
  channel   channel  @relation(fields: [channelId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, channelId])
}

model role {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  serverId    Int
  server      server            @relation(fields: [serverId], references: [id])
  members     UserToRoles[]
}

model UserToRoles {
  id                        Int            @id @default(autoincrement())
  userId                    String
  roleId                    Int
  server_member_user_id     String
  server_member_server_id   Int
  user                      User            @relation("user_to_roles", fields: [userId], references: [id])
  role                      role            @relation(fields: [roleId], references: [id])
  server_member             server_member   @relation("user_roles", fields: [server_member_user_id, server_member_server_id], references: [userId, serverId])

  @@unique([userId, roleId])
}

model ChannelRole {
  id        Int      @id @default(autoincrement())
  userId    String
  channelId Int
  role      ChannelRoleType
  user      User     @relation(fields: [userId], references: [id])
  channel   channel  @relation(fields: [channelId], references: [id])

  @@unique([userId, channelId])
}

enum ChannelRoleType {
  HOST
  CO_HOST
  SPEAKER
  LISTENER
}

model speak_request {
    id        Int      @id @default(autoincrement())
    userId    String
    channelId Int
    status    SpeakRequestStatus
}

enum SpeakRequestStatus {
    PENDING
    APPROVED
    DENIED
}


model user_badges {
  user_id   String
  badge_id  Int
  user      User   @relation(fields: [user_id], references: [id])
  badge     badge  @relation(fields: [badge_id], references: [id])
  @@id([user_id, badge_id])
}

model badge {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  users       user_badges[]
}

model Mute {
  id         Int      @id @default(autoincrement())
  userId     String
  serverId   Int
  channelId  Int?
  muteEnd    DateTime?
  user       User     @relation(fields: [userId], references: [id])
  server     server   @relation(fields: [serverId], references: [id])
  channel    channel? @relation(fields: [channelId], references: [id])
}

enum ChannelType {
    TEXT
    AUDIO
    VIDEO
}